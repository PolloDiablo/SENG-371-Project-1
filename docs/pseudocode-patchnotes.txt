Patch Note Data Mining:

=====================================
COMMON ALGORITHM (between LOL, TF2, and WOW):
(more detailed version below)
for each root page
  get list of all patch pages
  iterate through list
    - get url
    - get date
    - get version-number/name (if applicable)
  goto url
    - get body text
=====================================
- Turns out we can separate this into two parts
1. Get the patch metadata (url, date, title/version)
2. Get the patch body text

ALGORITHM PART 1 (get patch metadata):
- parser.getGameName();
- parser.getRootPageURLs();
- for each root page url
  - parser.getPatchDetailsFromRoot(String htmlPageText);
  - add details to database (each list item is a new entry in the table)
    - if row already exists, then update it
    
ALGORITHM PART 2 (get patch bodies):
- for each row in table that has an empty body field:
  go to url
  - parser.getBodyTextFromPatchURL(String htmlPageText);

=====================================
INTERFACE:
public interface IPatchNoteParser {
	 
	/** Returns name of this game, will be associated with each database row entry*/
	public abstract String getGameName();
	
	/** Each game has a list of patch notes online.
	 * This list often on one page, but may also be spread across multiple pages.
	 * 
	 * This function returns the list of the URLs to each of these "root" pages.
	 * (Should be at least one)
	 * 
	 * */
	public abstract List<String> getRootPageURLs();
	
	/** Input: a "root" page containing a list of links 
	 * 		(and other meta information) for many patch notes
	 *  
	 *  Returns all of details for each patch note
	 *  	- gameName (required, will be the same for all patch notes for a given dame)
	 *  	- url to full patch body (required)
	 *  	- date (required)
	 *  	- version-number/name (optional)
	 */
	public abstract List<PatchNoteMetaData> getPatchDetailsFromRoot(String htmlPageText);
	
	/** Get the body text from the patch (the current page)*/
	public abstract String getBodyTextFromPatchURL(String htmlPageText);
}
