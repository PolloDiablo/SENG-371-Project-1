Patch Note Data Mining:

LOL:
navigate to root 
for each row in table
  - get url
  - get date
  - get version-number/name
  goto link
  - get body text (no pictures or formatting, if possible)
      http://stackoverflow.com/questions/18336956/get-visible-text-of-page-with-selenium-webdriver

TF2:
navigate to root 
for each link in each sublist
  - get url
  - get date
  - get version-number/name (if link is bolded, search top of page for match)
  goto link
  - get version-number/name (if applicable)
  - get body text (no pictures or formatting, if possible)

WOW:
navigate to root 
for each row in each table on each page
  - get url
  - get date
  - get version-number/name (if applicable)
  goto link
  - get body text (no pictures or formatting, if possible)
      
=====================================
COMMON ALGORITHM:
for each root page
  get list of all patch pages
  iterate through list
    - get url
    - get date
    - get version-number/name (if applicable)
  iterate through list
    - goto url
    - get body text

=====================================
INTERFACE FUNCTIONS:

TODO: need to pass the Selenium driver around...
/**
- Finds the 

*/
/** Returns name of this game, will be the name of the database table entry*/
public abstract String getGameName();

/** Returns the list of root page URLs, there must be at least one
    Each root page includes links and information about many patches.*/
public abstract List<String> getRootPageURLs();

/** 
  Returns a list of details for each patch note from the root (the current page)
  - url to full patch body (required)
  - date (required)
  - version-number/name (optional)
*/
public abstract List<String[]> getPatchDetailsFromRoot(;

/** Get the body text from the patch (the current page)*/
public abstract String getBodyTextFromPatchURL();

ALGORITHM PART 1:
- getGameName();
- setup database table with given name (??uniqueness)

ALGORITHM PART 2:
- getRootPageURLs();
- for each root page url
  - getPatchDetailsFromRoot();
  - add details to database (each list item is a new entry in the table)
    - if row already exists, then update it
    
ALGORITHM PART 3:
- for each row in table (? recently updated only)
  - go to url
  getBodyTextFromPatchURL(patchURL);
